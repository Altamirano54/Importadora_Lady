/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Presentacion.Clientes;

import Presentacion.Modelos.ModeloComboboxTipoDocumento;
import Presentacion.Modelos.ModeloTablaCliente;
import Entidades.Cliente;
import Logica.ClienteManager;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import AccesoDatos.BDTipo_Documento;
import Entidades.Tipo_documento;
import Presentacion.Principal;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Amir Altamirano
 */
public class GestionClientes extends javax.swing.JInternalFrame {

    private static GestionClientes cliente;
    
    private Principal menu= Principal.getInstance();
    
    BDTipo_Documento bdtd = new BDTipo_Documento();
    private ModeloComboboxTipoDocumento mctd = new ModeloComboboxTipoDocumento();
    private ModeloTablaCliente modeloTablaCliente = new ModeloTablaCliente();
    private ClienteManager clienteManager = new ClienteManager();
    private Cliente clienteSeleccionado = null;

    /**
     * Creates new form GestionClientes
     */
    private GestionClientes() {
        initComponents();
        CargarTabla();
        CragarCoombobox();

        /*BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);*/
        //this.setBorder(null);
    }

    public static GestionClientes getCliente() {
        if (cliente == null || cliente.isClosed()) {
            cliente = new GestionClientes();
        }
        return cliente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBListaClientes = new javax.swing.JTable();
        BTModificar = new javax.swing.JButton();
        BTNuevo = new javax.swing.JButton();
        BTEliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(190, 147, 234));
        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jScrollPane1.setBackground(new java.awt.Color(190, 147, 234));

        TBListaClientes.setModel(this.modeloTablaCliente);
        jScrollPane1.setViewportView(TBListaClientes);

        BTModificar.setBackground(new java.awt.Color(153, 153, 255));
        BTModificar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BTModificar.setText("Modificar");
        BTModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarActionPerformed(evt);
            }
        });

        BTNuevo.setBackground(new java.awt.Color(153, 153, 255));
        BTNuevo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BTNuevo.setText("Nuevo");
        BTNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNuevoActionPerformed(evt);
            }
        });

        BTEliminar.setBackground(new java.awt.Color(153, 153, 255));
        BTEliminar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BTEliminar.setText("Eliminar");
        BTEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Gestion de Cliente");

        jLayeredPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(BTModificar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(BTNuevo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(BTEliminar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(BTNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BTModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTEliminar)
                .addGap(17, 17, 17))
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTModificar)
                    .addComponent(BTNuevo)
                    .addComponent(BTEliminar))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLayeredPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarActionPerformed
        clienteSeleccionado=modeloTablaCliente.getCliente(TBListaClientes.getSelectedRow());
        if (clienteSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente de la tabla.", "Selección Requerida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Está seguro de que desea eliminar al cliente '" + clienteSeleccionado.getNombre() + "'?",
                "Confirmar Eliminación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            if (clienteManager.eliminarCliente(clienteSeleccionado.getId())) {
                JOptionPane.showMessageDialog(this, "Cliente eliminado exitosamente.", "Eliminación Exitosa", JOptionPane.INFORMATION_MESSAGE);
                CargarTabla();
                limpiarFormulario();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el cliente.", "Error de Eliminación", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTEliminarActionPerformed

    private void BTModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarActionPerformed
        clienteSeleccionado=modeloTablaCliente.getCliente(TBListaClientes.getSelectedRow());
        if (clienteSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente de la tabla para modificar.", "Selección Requerida", JOptionPane.WARNING_MESSAGE);
        } else {
            menu.RegistrarClinete(true, clienteSeleccionado);
            clienteSeleccionado=null;
        }
    }//GEN-LAST:event_BTModificarActionPerformed

    private void BTNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNuevoActionPerformed
        menu.RegistrarClinete(false, null);
        limpiarFormulario();
    }//GEN-LAST:event_BTNuevoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTEliminar;
    private javax.swing.JButton BTModificar;
    private javax.swing.JButton BTNuevo;
    private javax.swing.JTable TBListaClientes;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public void CargarTabla() {
        try {
            modeloTablaCliente.setListadoCliente(clienteManager.listarClientesActivos());
            System.err.println("cantidad de clientes: " + clienteManager.listarClientesActivos().size());
            ajustarAnchoColumnas(TBListaClientes);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se pudo cargar la tabla");
        }
    }

    public void CragarCoombobox() {
        try {
            mctd.setListadoTipoDocumento(bdtd.listar());
            System.err.println("numero de docu: " + bdtd.listar().size());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se pudo cargar los tipos documento");
        }
    }

 

    private void limpiarFormulario() {

        TBListaClientes.clearSelection(); // Deselecciona cualquier fila en la tabla
        this.clienteSeleccionado = null; // MUY IMPORTANTE: Resetea el estado a "nuevo registro"

    }


    
    public void ajustarAnchoColumnas(JTable tabla) {
        for (int col = 0; col < tabla.getColumnCount(); col++) {
            TableColumn columna = tabla.getColumnModel().getColumn(col);
            int anchoMax = 0;

            // Comprobar ancho del header
            TableCellRenderer headerRenderer = columna.getHeaderRenderer();
            if (headerRenderer == null) {
                headerRenderer = tabla.getTableHeader().getDefaultRenderer();
            }
            Component headerComp = headerRenderer.getTableCellRendererComponent(
                tabla, columna.getHeaderValue(), false, false, 0, col);
            anchoMax = headerComp.getPreferredSize().width;

            // Comprobar ancho de las celdas
            for (int row = 0; row < tabla.getRowCount(); row++) {
                TableCellRenderer cellRenderer = tabla.getCellRenderer(row, col);
                Component comp = tabla.prepareRenderer(cellRenderer, row, col);
                int anchoCelda = comp.getPreferredSize().width;
                anchoMax = Math.max(anchoMax, anchoCelda);
            }

            columna.setPreferredWidth(anchoMax + 10); // margen adicional
        }
    }

}
